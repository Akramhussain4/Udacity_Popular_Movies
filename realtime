public class JobInfoScheduler {

    private Context mContext;
    private static String TAG = JobInfoScheduler.class.getSimpleName();
    private static JobInfoScheduler instance = null;

    final int periodicity = (int) TimeUnit.MINUTES.toSeconds(15); // Every 12 min periodicity expressed as seconds
    final int toleranceInterval = (int) TimeUnit.MINUTES.toSeconds(15); // a small(ish) window of time when triggering is OK


    private JobInfoScheduler() {
    }

    public static JobInfoScheduler getInstance() {
        if (instance == null) {
            instance = new JobInfoScheduler();
        }
        return instance;
    }

    public void scheduleJob(String jobTag, Context context) {
        FirebaseJobDispatcher jobDispatcher = new FirebaseJobDispatcher(new GooglePlayDriver(context));
        Job syncJob = jobDispatcher.newJobBuilder()
                .setService(RealTimeSyncingService.class)
                .setLifetime(Lifetime.FOREVER)
                .setReplaceCurrent(false)
                .setTag(jobTag)
                .setTrigger(Trigger.executionWindow(periodicity, toleranceInterval+ periodicity))
                .setRecurring(true)
                .setConstraints(Constraint.ON_ANY_NETWORK)
                .build();
        jobDispatcher.mustSchedule(syncJob);
        //   int schedule = jobDispatcher.schedule(syncJob);

        Log.d(TAG, "Job Scheduled ");
    }
}












public class RealTimeSyncingService extends JobService {

    private static final String TAG = RealTimeSyncingService.class.getSimpleName();
    private Context context;

    @Override
    public void onCreate() {
        super.onCreate();
        context = getApplicationContext();
        Log.d(TAG, "onCreate()");
    }


    @Override
    public boolean onStartJob(final JobParameters job) {
        Log.d(TAG, "Job started");
        if (isNetworkAvailable(context)) {
            LocalDataSource.getInstance().getItemsToUpload(new LocalDataSource.GetAllItemsCallback() {
                @Override
                public void onSuccess(final List<ItemModel> itemList) {
                    for (ItemModel item : itemList) {
                        RemoteDataSource.getInstance().submitLocalItem(item, new DataSource.CommonCallback<ItemModel>() {
                            @Override
                            public void onSuccess(ItemModel itemModel) {
                                itemModel.setUploaded(true);
                                LocalDataSource.getInstance().updateUploadedItem(itemModel);
                                Log.d(TAG, "-----------------DONE");
                            }

                            @Override
                            public void onFailure(Throwable throwable) {

                            }

                            @Override
                            public void onNetworkFailure() {

                            }
                        });
                    }
                }

                @Override
                public void onFailure(String message) {
                    Log.d(TAG, "-----------------FAIL" + message);
                }
            });
        }

        String message = CommonUtils.isNetworkAvailable(context) ? "Good! Connected to Internet" : "Sorry! Not connected to internet";
        Log.d(TAG, message);
        return true;
    }

    @Override
    public boolean onStopJob(JobParameters job) {
        Log.d(TAG, "Job ended");
        return true;
    }

}



















 public static boolean isNetworkAvailable(Context context) {
        boolean isNetwork = false;
        try {
            ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo networkInfo = null;
            if (connMgr != null) {
                networkInfo = connMgr.getActiveNetworkInfo();
            }
            if (networkInfo != null && networkInfo.isAvailable()
                    && networkInfo.isConnected()) {
                isNetwork = true;
            }
        } catch (Exception e) {
            Analytics.log(TAG, e);
        }

        return isNetwork;
    }
